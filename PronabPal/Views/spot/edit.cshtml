@model PronabPal.Models.SpotModel
@{
    ViewBag.Title = "edit";
    Layout = "~/Views/Shared/_LayoutAfterDashboardView.cshtml";
}
<style>
    .user-pic {
        border: 1px solid #ccc;
    }
</style>

<div class="row">

    <h2 style="margin: 0; text-align: center;"><span>Edit Spot</span></h2>

    <div class="col-sm-12 col-xs-12">
        @using (Html.BeginForm("edit", "spot", FormMethod.Post, new { enctype = "multipart/form-data" }))
        {
            @Html.HiddenFor(model => model.SpotId)
            @Html.HiddenFor(model => model.CanvasSketch)
            @Html.HiddenFor(model => model.Image)

            <div class="spot-details-message">
                @if (TempData.Count > 0)
                {
                    if (TempData["error"] != null && !string.IsNullOrWhiteSpace(TempData["error"].ToString()))
                    {
                    <div class="alert alert-danger fade in" style="margin-top: 15px;">
                        <button type="button" class="close" data-dismiss="alert" aria-hidden="true">×</button>
                        <i class="glyphicon glyphicon-ban-circle alert-icon"></i><strong>Oh snap!</strong> @TempData["error"]
                    </div>
                    }
                }
                <div class="row">
                    <div class="col-md-12 col-sm-12 col-xs-12">
                        <div class="row">
                            <div class="col-md-12 col-sm-12 col-xs-12">
                                <div class="form-group">
                                    <label>Spot Name <span>*</span></label>
                                    @Html.TextBoxFor(model => model.SpotName, new { @class = "form-control", @placeholder = "Enter Spot Name* ", @required = "true" })
                                    <span style="color: red">@Html.ValidationMessageFor(model => model.SpotName)</span>
                                </div>
                            </div>
                        <div class="col-md-4 col-sm-4 col-xs-12">
                                <div class="form-group">
                                    <label>Spot Type <span>*</span></label>
                                    @Html.DropDownListFor(model => model.SpotType, new SelectList(
                                     new List<Object> { new { value = "Answer", text = "Answer" }, new { value = "Question", text = "Question" } , 
                                         new { value = "Observation", text = "Observation" }
                                      }, "value", "text", 0), "--Selete Category Type--", new { @class = "form-control", @required = "true" })
                                    <span style="color: red">@Html.ValidationMessageFor(model => model.SpotType)</span>
                                </div>
                            </div>
                            
                        <div class="col-md-4 col-sm-4 col-xs-12">
                            <div class="form-group">
                                <label>Spot Category </label>
                                @Html.DropDownListFor(model => model.CategoryId, (IEnumerable<SelectListItem>)ViewBag.Categorylist, "-- Select Category--", new { @class = "form-control" })
                                <span style="color: red">@Html.ValidationMessageFor(model => model.CategoryId)</span>
                            </div>
                        </div>

                            <div class="col-md-4 col-sm-4 col-xs-12">
                                <div class="form-group">
                                    <label>Flow </label>
                                    @Html.DropDownListFor(model => model.DictumId, (IEnumerable<SelectListItem>)ViewBag.Dictumlist, "-- Select Flow--", new { @class = "form-control" })
                                    <span style="color: red">@Html.ValidationMessageFor(model => model.DictumId)</span>
                                </div>
                            </div>

                            <div class="col-md-12 col-sm-12 col-xs-12">
                                <div class="form-group">
                                    <label>Description</label>
                                    @Html.TextAreaFor(model => model.Description, new { id = "editor", @rows = "6", @class = "form-control", @placeholder = "Enter Description " })
                                    <span style="color: red">@Html.ValidationMessageFor(model => model.Description)</span>
                                </div>
                            </div>

                            <div class="col-md-8 col-sm-8 col-xs-12">
                                <div class="form-group">
                                    <label>Canvas Sketch</label>
                                    <div class="demo">
                                        <canvas id="simple_sketch" style="width: 100%; height: 200px; border: 1px solid #ccc;"></canvas>
                                        <input type="button" name="clear" value="Clear" onclick="clearCanvas(canvas, ctx);" />
                                    </div>
                                    <input type="hidden" name="CanvasSketch" id="CanvasSketch" />
                                    <span style="color: red">@Html.ValidationMessageFor(model => model.CanvasSketch)</span>
                                </div>
                            </div>

                            <div class="col-md-4 col-sm-4 col-xs-12">
                                <div class="form-group">
                                    <label>Canvas Image</label>
                                    <div class="user-pic">
                                        <img style="height:150px;max-width:100%;" src="@Url.Content(ViewBag.CanvasSketch)">
                                    </div>
                                </div>
                            </div>

                            <div class="col-md-6 col-sm-6 col-xs-12">
                                <div class="form-group">
                                    <label>Image</label>
                                    <div class="user-pic">
                                        <div class="clearfix">&nbsp;</div>
                                        <img id="thumbnil" style="height:150px;max-width:100%;margin: 0 auto;display: block;" src="@Url.Content(ViewBag.SpotImage)">
                                        <div class="clearfix">&nbsp;</div>
                                        <div class="form-group">
                                            <input name="ImageData" id="ImageData" class="form-control" accept="/image.*/" onchange="showMyImage(this)" type="file">
                                        </div>
                                    </div>
                                </div>
                            </div>

                            <div class="col-md-12 col-sm-12 col-xs-12">
                                <div class="col-md-6 col-sm-6 col-xs-12 text-right">
                                    <input type="submit" value="Submit" onclick="return CheckCanvas();">
                                </div>
                                <div class="col-md-6 col-sm-6 col-xs-12">
                                    <a href="@Url.Action("list", "spot")" class="btn btn-danger ml10">Cancel</a>
                                </div>
                            </div>

                        </div>


                    </div>
                </div>
            </div>
        }
    </div>

</div>


<script>
    function checkFileExtension(elem) {
        var filePath = elem.value;

        if (filePath.indexOf('.') == -1)
            return false;

        var validExtensions = new Array();
        var ext = filePath.substring(filePath.lastIndexOf('.') + 1).toLowerCase();

        validExtensions[0] = 'jpg';
        validExtensions[1] = 'jpeg';
        validExtensions[2] = 'bmp';
        validExtensions[3] = 'png';

        for (var i = 0; i < validExtensions.length; i++) {
            if (ext == validExtensions[i])
                return true;
        }


        alert('The file extension ' + ext.toUpperCase() + ' is not allowed!');
        elem.value = null;
        return false;
    }

    function showMyImage(fileInput) {

        if (checkFileExtension(fileInput) == true) {
            var files = fileInput.files;
            for (var i = 0; i < files.length; i++) {
                var file = files[i];
                var imageType = /image.*/;
                if (!file.type.match(imageType)) {
                    continue;
                }
                var img = document.getElementById("thumbnil");
                img.file = file;
                var reader = new FileReader();
                reader.onload = (function (aImg) {
                    return function (e) {
                        aImg.src = e.target.result;
                    };
                })(img);
                reader.readAsDataURL(file);
            }
        }
    }
</script>
